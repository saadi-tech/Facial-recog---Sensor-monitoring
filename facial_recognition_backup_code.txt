#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sensor_monitor_updated.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import tosr0x



import time
import cv2
from mainv2 import *
import numpy as np
#import face_recognition
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
import serial.tools.list_ports
from PyQt5.QtCore import pyqtSignal, QObject
from PyQt5.QtCore import QThread
import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from os import listdir
from os.path import isfile, join
import face_recognition
ports_dict = {}
ports = []

current_image = None

op_mode = "manual"
threshold_ambient_temp = 29
threshold_body_temp = 35
global myTosr0x
relay_ports = []
relay_ports_names = []
person_in_frame = False

def set_relayboard():
    print("Scanning for relay board....")

    global myTosr0x,relay_ports,relay_ports_names
    th = tosr0x.handler()
    for i in range(len(th)):
        relay_ports.append(th[i])
        relay_ports_names.append(th[i].device.port)

    print(th)


def set_relays_ON():
    global myTosr0x
    myTosr0x.set_relay_position(1, 1)
    myTosr0x.set_relay_position(2, 1)
    print(myTosr0x.get_relay_positions)

def set_relays_OFF():
    global myTosr0x
    myTosr0x.set_relay_position(1, 0)
    myTosr0x.set_relay_position(2, 0)


from PyQt5 import QtCore, QtGui, QtWidgets

def maintain_aspect_ratio_resize(image, width=None, height=None, inter=cv2.INTER_AREA):
    # Grab the image size and initialize dimensions
    dim = None
    (h, w) = image.shape[:2]

    # Return original image if no need to resize
    if width is None and height is None:
        return image

    # We are resizing height if width is none
    if width is None:
        # Calculate the ratio of the height and construct the dimensions
        r = height / float(h)
        dim = (int(w * r), height)
    # We are resizing width if height is none
    else:
        # Calculate the ratio of the 0idth and construct the dimensions
        r = width / float(w)
        dim = (width, int(h * r))

    # Return the resized image
    return cv2.resize(image, dim, interpolation=inter)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1338, 862)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(0, 20, 301, 341))
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(10, 60, 111, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(10, 110, 101, 16))
        self.label_2.setObjectName("label_2")
        self.sensor1_port_name = QtWidgets.QComboBox(self.groupBox)
        self.sensor1_port_name.setGeometry(QtCore.QRect(160, 60, 121, 22))
        self.sensor1_port_name.setObjectName("sensor1_port_name")
        self.sensor2_port_name = QtWidgets.QComboBox(self.groupBox)
        self.sensor2_port_name.setGeometry(QtCore.QRect(160, 110, 121, 22))
        self.sensor2_port_name.setObjectName("sensor2_port_name")
        self.refresh_button = QtWidgets.QPushButton(self.groupBox)
        self.refresh_button.setGeometry(QtCore.QRect(90, 280, 93, 28))
        self.refresh_button.setObjectName("refresh_button")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(20, 220, 55, 16))
        self.label_3.setObjectName("label_3")
        self.relay_port_name = QtWidgets.QComboBox(self.groupBox)
        self.relay_port_name.setGeometry(QtCore.QRect(90, 220, 191, 22))
        self.relay_port_name.setEditable(False)
        self.relay_port_name.setObjectName("relay_port_name")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(0, 360, 301, 191))
        self.groupBox_2.setObjectName("groupBox_2")
        self.label_6 = QtWidgets.QLabel(self.groupBox_2)
        self.label_6.setGeometry(QtCore.QRect(10, 50, 55, 16))
        self.label_6.setObjectName("label_6")
        self.camera_port_name = QtWidgets.QComboBox(self.groupBox_2)
        self.camera_port_name.setGeometry(QtCore.QRect(90, 40, 191, 22))
        self.camera_port_name.setObjectName("camera_port_name")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(310, 20, 361, 341))
        self.groupBox_3.setObjectName("groupBox_3")
        self.temp1 = QtWidgets.QLCDNumber(self.groupBox_3)
        self.temp1.setGeometry(QtCore.QRect(200, 30, 131, 51))
        self.temp1.setObjectName("temp1")
        self.temp2 = QtWidgets.QLCDNumber(self.groupBox_3)
        self.temp2.setGeometry(QtCore.QRect(200, 100, 131, 51))
        self.temp2.setObjectName("temp2")
        self.label_7 = QtWidgets.QLabel(self.groupBox_3)
        self.label_7.setGeometry(QtCore.QRect(20, 50, 151, 16))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.groupBox_3)
        self.label_8.setGeometry(QtCore.QRect(20, 120, 111, 16))
        self.label_8.setObjectName("label_8")
        self.label_12 = QtWidgets.QLabel(self.groupBox_3)
        self.label_12.setGeometry(QtCore.QRect(340, 60, 21, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.groupBox_3)
        self.label_13.setGeometry(QtCore.QRect(340, 130, 21, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox_3)
        self.groupBox_5.setGeometry(QtCore.QRect(10, 170, 341, 161))
        self.groupBox_5.setObjectName("groupBox_5")
        self.label_18 = QtWidgets.QLabel(self.groupBox_5)
        self.label_18.setGeometry(QtCore.QRect(20, 40, 301, 71))
        font = QtGui.QFont()
        font.setPointSize(26)
        font.setBold(True)
        font.setWeight(75)
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(910, 20, 351, 371))
        self.groupBox_4.setObjectName("groupBox_4")
        self.label_17 = QtWidgets.QLabel(self.groupBox_4)
        self.label_17.setGeometry(QtCore.QRect(10, 30, 331, 321))
        self.label_17.setText("")
        self.label_17.setObjectName("label_17")
        self.detect_button = QtWidgets.QPushButton(self.centralwidget)
        self.detect_button.setGeometry(QtCore.QRect(910, 400, 121, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.detect_button.setFont(font)
        self.detect_button.setObjectName("detect_button")
        self.refresh_db_button = QtWidgets.QPushButton(self.centralwidget)
        self.refresh_db_button.setGeometry(QtCore.QRect(1090, 400, 171, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.refresh_db_button.setFont(font)
        self.refresh_db_button.setObjectName("refresh_db_button")
        self.groupBox_6 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_6.setGeometry(QtCore.QRect(910, 460, 351, 131))
        self.groupBox_6.setObjectName("groupBox_6")
        self.detected_name_output = QtWidgets.QLabel(self.groupBox_6)
        self.detected_name_output.setGeometry(QtCore.QRect(30, 40, 311, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.detected_name_output.setFont(font)
        self.detected_name_output.setObjectName("detected_name_output")
        self.groupBox_7 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_7.setGeometry(QtCore.QRect(0, 550, 301, 141))
        self.groupBox_7.setObjectName("groupBox_7")
        self.auto_radio_button = QtWidgets.QRadioButton(self.groupBox_7)
        self.auto_radio_button.setGeometry(QtCore.QRect(20, 30, 95, 21))
        self.auto_radio_button.setObjectName("auto_radio_button")
        self.manual_radio_button = QtWidgets.QRadioButton(self.groupBox_7)
        self.manual_radio_button.setGeometry(QtCore.QRect(130, 30, 95, 21))
        self.manual_radio_button.setChecked(True)
        self.manual_radio_button.setObjectName("manual_radio_button")
        self.start_button = QtWidgets.QPushButton(self.groupBox_7)
        self.start_button.setGeometry(QtCore.QRect(80, 70, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.start_button.setFont(font)
        self.start_button.setObjectName("start_button")
        self.groupBox_8 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_8.setGeometry(QtCore.QRect(680, 20, 221, 91))
        self.groupBox_8.setObjectName("groupBox_8")
        self.running_status_label = QtWidgets.QLabel(self.groupBox_8)
        self.running_status_label.setGeometry(QtCore.QRect(30, 30, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.running_status_label.setFont(font)
        self.running_status_label.setObjectName("running_status_label")
        self.groupBox_9 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_9.setGeometry(QtCore.QRect(680, 120, 221, 241))
        self.groupBox_9.setObjectName("groupBox_9")
        self.speed_knob = QtWidgets.QDial(self.groupBox_9)
        self.speed_knob.setGeometry(QtCore.QRect(40, 20, 131, 151))
        self.speed_knob.setMaximum(10)
        self.speed_knob.setObjectName("speed_knob")
        self.speed_show_label = QtWidgets.QLCDNumber(self.groupBox_9)
        self.speed_show_label.setGeometry(QtCore.QRect(50, 170, 111, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.speed_show_label.setFont(font)
        self.speed_show_label.setMouseTracking(True)
        self.speed_show_label.setDigitCount(4)
        self.speed_show_label.setProperty("value", 0.0)
        self.speed_show_label.setObjectName("speed_show_label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1338, 25))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "Sensors:"))
        self.label.setText(_translate("MainWindow", "Ambient Sensor:"))
        self.label_2.setText(_translate("MainWindow", "Body Sensor:"))
        self.sensor1_port_name.setPlaceholderText(_translate("MainWindow", "None"))
        self.sensor2_port_name.setPlaceholderText(_translate("MainWindow", "None"))
        self.refresh_button.setText(_translate("MainWindow", "Refresh"))
        self.label_3.setText(_translate("MainWindow", "Relay:"))
        self.relay_port_name.setCurrentText(_translate("MainWindow", "None"))
        self.relay_port_name.setPlaceholderText(_translate("MainWindow", "None"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Camera:"))
        self.label_6.setText(_translate("MainWindow", "Camera:"))
        self.camera_port_name.setPlaceholderText(_translate("MainWindow", "None"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Sensors status:"))
        self.label_7.setText(_translate("MainWindow", "Ambient temperarture:"))
        self.label_8.setText(_translate("MainWindow", "Body temperature:"))
        self.label_12.setText(_translate("MainWindow", "C"))
        self.label_13.setText(_translate("MainWindow", "C"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Relay status:"))
        self.label_18.setText(_translate("MainWindow", "Not activated"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Camera feed:"))
        self.detect_button.setText(_translate("MainWindow", "Detect"))
        self.refresh_db_button.setText(_translate("MainWindow", "Refresh Database"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Detection:"))
        self.detected_name_output.setText(_translate("MainWindow", "None"))
        self.groupBox_7.setTitle(_translate("MainWindow", "Operation mode:"))
        self.auto_radio_button.setText(_translate("MainWindow", "Auto"))
        self.manual_radio_button.setText(_translate("MainWindow", "Manual"))
        self.start_button.setText(_translate("MainWindow", "Start"))
        self.start_button.setShortcut(_translate("MainWindow", "Return"))
        self.groupBox_8.setTitle(_translate("MainWindow", "Working:"))
        self.running_status_label.setText(_translate("MainWindow", "Idle"))
        self.groupBox_9.setTitle(_translate("MainWindow", "Manual mode speed:"))
        self.scan_ports()
        self.refresh_button.clicked.connect(self.scan_ports)
        self.start_button.clicked.connect(self.start_monitoring)
        self.detect_button.clicked.connect(self.detect_face)
        self.refresh_db_button.clicked.connect(self.refresh_encoding)
        self.speed_knob.valueChanged.connect(self.dialer_changed)

        load_encodings()
        set_relayboard()
        self.relay_port_name.addItems(relay_ports_names)

    def dialer_changed(self):
        getValue = self.speed_knob.value()
        self.speed_show_label.display(str(getValue))

    def detect_face(self):
        global current_image
        self.recognize_faces(current_image)

    def refresh_encoding(self):
        self.refresh_thread = update_db()
        self.refresh_thread.refresh_status.connect(self.show_refresh_status)
        self.refresh_thread.start()

    def show_refresh_status(self,val):
        self.running_status_label.setText(val)

    def process_camera_feed(self,val):
        #print(val)

        global current_image
        self.running_status_label.setStyleSheet('QLabel#running_status_label {color: green}')
        self.running_status_label.setText("Monitoring..")
        current_image = val
        frame = cv2.resize(val,(311,311))
        height, width, channel = frame.shape
        bytesPerLine = 3 * width
        qImg = QImage(frame.data, width, height, bytesPerLine, QImage.Format_BGR888)
        self.label_17.setPixmap(QPixmap(qImg))
        #self.recognize_faces(val)

    def scan_ports(self):
        temper.main()
        ports_info = (temper.required_info)
        #ports_info = {"hidraw1":35,"hidraw3":45}
        global ports_dict



        port_names = []
        for info in ports_info:

            port_names.append(info)
            #ports_dict[port.description] = port.device
        print (port_names)
        self.sensor1_port_name.addItems(port_names)
        self.sensor2_port_name.addItems(port_names)



    def start_monitoring(self):
        global ports_dict,myTosr0x

        sens1_port = (self.sensor1_port_name.currentText())
        sens2_port = (self.sensor2_port_name.currentText())
        ports = {"Ambient": sens1_port, "Body":sens2_port}
        print(ports_dict)
        mode = self.auto_radio_button.isChecked()

        if(mode == 1):
            self.speed_knob.setDisabled(1)
            opmode = "automatic"
        
        self.auto_radio_button.setDisabled(1)
        self.manual_radio_button.setDisabled(1)
        
        relay_port = self.relay_port_name.currentText()
        if (not relay_port is None):
            relay = relay_ports_names.index(relay_port)
            myTosr0x = relay_ports[relay]
        self.running_status_label.setStyleSheet('QLabel#running_status_label {color: red}')
        self.running_status_label.setText("Loading camera.. ")
        self.camera_thread = camera_monitor()
        self.camera_thread.camera_feed.connect(self.process_camera_feed)
        self.camera_thread.start()

        if (1):#and sens2_port!='None'):


            self.sensor1_thread = sensor1_monitor(ports)
            self.sensor1_thread.sensor1_value.connect(self.set_temp1)
            self.sensor1_thread.fan_relay.connect(self.set_fan)
            self.sensor1_thread.start()
        time.sleep(0.5)
        self.recognizer_thread = face_recognizer()
        self.recognizer_thread.person_name.connect(self.update_person_name)
        self.recognizer_thread.start()

    def update_person_name(self,val):
        global person_in_frame

        if(val!='Unknown' and val != ''):
            person_in_frame = True
        else:
            person_in_frame = False
        self.detected_name_output.setText(val)


    def set_fan(self,val):
      global person_in_frame
      if(self.auto_radio_button.isChecked() ):
        print("Person in front: ",person_in_frame)
        if (val and person_in_frame ):
            self.label_18.setStyleSheet('QLabel#label_18 {color: red}')
            self.label_18.setText("   Activated")
            set_relays_ON()
        else:

            self.label_18.setStyleSheet('QLabel#label_18 {color: black}')
            self.label_18.setText("Not Activated")
            set_relays_OFF()







    def set_temp1(self,val):
        self.temp1.display(str(val['Ambient']))
        self.temp2.display(str(val['Body']))

def load_encodings():

        global dict, known_faces_names, known_faces_encodings
        file = open("facial_encoding_database.csv", "r")

        lines = file.readlines()
        dict = {}
        for i in range(len(lines)):
            columns = lines[i].split(",")

            name = columns[0]
            encodings = columns[1:len(columns)]
            for j in range(len(encodings)):
                encodings[j] = float(encodings[j])

            encodings = np.asarray(encodings)

            dict[name] = encodings

        known_faces_names = []
        known_faces_encodings = []

        for key in (dict):
            known_faces_names.append(key)
            known_faces_encodings.append(dict[key])

        print("Encodings loaded...")
        file.close()





class update_db(QThread):

    def __init__(self, parent=None):
        super(update_db, self).__init__(parent)

    refresh_status = pyqtSignal(str)

    def refresh_encoding_database(self):
            print("Refreshing Database....")
            mypath = "images_database//"
            onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]

            file = open("facial_encoding_database.csv", "w+")
            # Load a sample picture and learn how to recognize it.

            for i in range(len(onlyfiles)):
                print("Processing image ", i + 1)
                status = str(i/len(onlyfiles)*100) + "% completed."
                self.refresh_status.emit(status)
                image = face_recognition.load_image_file(mypath + onlyfiles[i])
                face_encoding = face_recognition.face_encodings(image)[0]
                face_encoding = face_encoding.flatten('C')

                string = ""
                string += (onlyfiles[i].split(".")[0] + ',')

                for j in range(face_encoding.shape[0]):
                    string += (str(face_encoding[j]) + ",")
                string = string[:-1]
                file.write(string)
                file.write("\n")
            file.close()
            load_encodings()
            self.refresh_status.emit("100% completed.")
            time.sleep(1)
            self.refresh_status.emit("Idle")
            print("Data written successfully....")

    def run(self):
        self.refresh_encoding_database()


class sensor1_monitor(QThread):

    def __init__(self, port, parent=None):
        super(sensor1_monitor, self).__init__(parent)
        self.port = port

    sensor1_value = pyqtSignal(dict)
    fan_relay = pyqtSignal(bool)

    def run(self):
        while (1):
            temper.main()
            info = temper.required_info
            #print("Info:", info)
            try:
                valueA = float(info[self.port['Ambient']])
            except:
                valueA = 0
            try:
                valueB = float(info[self.port['Body']])
            except:
                valueB = 0
            values = {"Ambient":valueA  , "Body":valueB}
            print(values)
            if (valueA >=threshold_ambient_temp):
                self.fan_relay.emit(1)
            elif(valueB >= threshold_body_temp):
                self.fan_relay.emit(1)
            else:
                self.fan_relay.emit(0)
            self.sensor1_value.emit(values)
            time.sleep(1)


class camera_monitor(QThread):

    def __init__(self, parent=None):
        super(camera_monitor, self).__init__(parent)

    camera_feed = pyqtSignal(np.ndarray)

    def run(self):

        cap = cv2.VideoCapture(2)
        print("Here")
        while (True):
            # Capture frame-by-frame
            ret, frame = cap.read()

            # Our operations on the frame come here
            # gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            # frame = cv2.resize(frame,(311,311))
            height, width, channel = frame.shape
            bytesPerLine = 3 * width
            qImg = QImage(frame.data, width, height, bytesPerLine, QImage.Format_RGB888)

            self.camera_feed.emit(frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break


def recognize_faces():
        global dict, known_faces_names, known_faces_encodings,current_image
        #print("cURRENT IMAGE IN FUNCTION: ",current_image)
        frame = current_image



        # Find all the faces and face encodings in the current frame of video
        if (not frame is None):
            frame = maintain_aspect_ratio_resize(frame, width=500)
            face_locations = face_recognition.face_locations(frame)
            face_encodings = face_recognition.face_encodings(frame, face_locations)

            print("Faces found: ", len(face_locations))

            face_names = []
            for face_encoding in face_encodings:
                # print("Face encodings size :", np.shape(face_encodings))
                # See if the face is a match for the known face(s)
                matches = face_recognition.compare_faces(known_faces_encodings, face_encoding)
                name = "Unknown"

                # # If a match was found in known_face_encodings, just use the first one.
                if True in matches:
                   first_match_index = matches.index(True)
                   name = known_faces_names[first_match_index]

                # Or instead, use the known face with the smallest distance to the new face
                '''face_distances = face_recognition.face_distance(known_faces_encodings, face_encoding)

                best_match_index = np.argmin(face_distances)

                if face_distances[best_match_index] < 0.6:
                    name = known_faces_names[best_match_index]

                face_names.append(name)'''

                print("detected face: " ,name)
                #self.detected_name_output.setText(name)
                return name

class face_recognizer(QThread):

    def __init__(self, parent=None):
        super(face_recognizer, self).__init__(parent)
        time.sleep(1)

    person_name = pyqtSignal(str)

    def run(self):
        global person_in_frame
        while(1):
            name = recognize_faces()
            self.person_name.emit(name)

            time.sleep(3)






def my_excepthook(type, value, tback):
    # log the exception here

    # then call the default handler
    sys.__excepthook__(type, value, tback)


if __name__ == "__main__":
    temper = Temper()
    sys.excepthook = my_excepthook
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
